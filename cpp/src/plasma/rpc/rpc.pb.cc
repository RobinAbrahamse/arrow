// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rpc.proto

#include "rpc.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace plasmaRPC {
constexpr ObjectID::ObjectID(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct ObjectIDDefaultTypeInternal {
  constexpr ObjectIDDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ObjectIDDefaultTypeInternal() {}
  union {
    ObjectID _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ObjectIDDefaultTypeInternal _ObjectID_default_instance_;
constexpr PlasmaObject::PlasmaObject(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : data_offset_(PROTOBUF_ULONGLONG(0))
  , metadata_offset_(PROTOBUF_ULONGLONG(0))
  , data_size_(PROTOBUF_ULONGLONG(0))
  , metadata_size_(PROTOBUF_ULONGLONG(0))
  , device_num_(0u){}
struct PlasmaObjectDefaultTypeInternal {
  constexpr PlasmaObjectDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PlasmaObjectDefaultTypeInternal() {}
  union {
    PlasmaObject _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PlasmaObjectDefaultTypeInternal _PlasmaObject_default_instance_;
constexpr ObjectDetails::ObjectDetails(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : object_(nullptr)
  , status_(0)
{}
struct ObjectDetailsDefaultTypeInternal {
  constexpr ObjectDetailsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ObjectDetailsDefaultTypeInternal() {}
  union {
    ObjectDetails _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ObjectDetailsDefaultTypeInternal _ObjectDetails_default_instance_;
}  // namespace plasmaRPC
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_rpc_2eproto[3];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_rpc_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_rpc_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_rpc_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::plasmaRPC::ObjectID, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::plasmaRPC::ObjectID, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::plasmaRPC::PlasmaObject, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::plasmaRPC::PlasmaObject, data_offset_),
  PROTOBUF_FIELD_OFFSET(::plasmaRPC::PlasmaObject, metadata_offset_),
  PROTOBUF_FIELD_OFFSET(::plasmaRPC::PlasmaObject, data_size_),
  PROTOBUF_FIELD_OFFSET(::plasmaRPC::PlasmaObject, metadata_size_),
  PROTOBUF_FIELD_OFFSET(::plasmaRPC::PlasmaObject, device_num_),
  PROTOBUF_FIELD_OFFSET(::plasmaRPC::ObjectDetails, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::plasmaRPC::ObjectDetails, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::plasmaRPC::ObjectDetails, status_),
  PROTOBUF_FIELD_OFFSET(::plasmaRPC::ObjectDetails, object_),
  ~0u,
  0,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::plasmaRPC::ObjectID)},
  { 6, -1, sizeof(::plasmaRPC::PlasmaObject)},
  { 16, 23, sizeof(::plasmaRPC::ObjectDetails)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::plasmaRPC::_ObjectID_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::plasmaRPC::_PlasmaObject_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::plasmaRPC::_ObjectDetails_default_instance_),
};

const char descriptor_table_protodef_rpc_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\trpc.proto\022\tplasmaRPC\"\026\n\010ObjectID\022\n\n\002id"
  "\030\001 \001(\t\"z\n\014PlasmaObject\022\023\n\013data_offset\030\002 "
  "\001(\004\022\027\n\017metadata_offset\030\003 \001(\004\022\021\n\tdata_siz"
  "e\030\004 \001(\004\022\025\n\rmetadata_size\030\005 \001(\004\022\022\n\ndevice"
  "_num\030\006 \001(\r\"\263\001\n\rObjectDetails\022/\n\006status\030\001"
  " \001(\0162\037.plasmaRPC.ObjectDetails.Status\022,\n"
  "\006object\030\002 \001(\0132\027.plasmaRPC.PlasmaObjectH\000"
  "\210\001\001\"8\n\006Status\022\006\n\002OK\020\000\022\013\n\007MISSING\020\001\022\013\n\007EV"
  "ICTED\020\002\022\014\n\010UNSEALED\020\003B\t\n\007_object2O\n\021Remo"
  "teObjectShare\022:\n\tGetObject\022\023.plasmaRPC.O"
  "bjectID\032\030.plasmaRPC.ObjectDetailsb\006proto"
  "3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_rpc_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_rpc_2eproto = {
  false, false, 441, descriptor_table_protodef_rpc_2eproto, "rpc.proto", 
  &descriptor_table_rpc_2eproto_once, nullptr, 0, 3,
  schemas, file_default_instances, TableStruct_rpc_2eproto::offsets,
  file_level_metadata_rpc_2eproto, file_level_enum_descriptors_rpc_2eproto, file_level_service_descriptors_rpc_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_rpc_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_rpc_2eproto);
  return descriptor_table_rpc_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_rpc_2eproto(&descriptor_table_rpc_2eproto);
namespace plasmaRPC {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ObjectDetails_Status_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_rpc_2eproto);
  return file_level_enum_descriptors_rpc_2eproto[0];
}
bool ObjectDetails_Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ObjectDetails_Status ObjectDetails::OK;
constexpr ObjectDetails_Status ObjectDetails::MISSING;
constexpr ObjectDetails_Status ObjectDetails::EVICTED;
constexpr ObjectDetails_Status ObjectDetails::UNSEALED;
constexpr ObjectDetails_Status ObjectDetails::Status_MIN;
constexpr ObjectDetails_Status ObjectDetails::Status_MAX;
constexpr int ObjectDetails::Status_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

class ObjectID::_Internal {
 public:
};

ObjectID::ObjectID(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:plasmaRPC.ObjectID)
}
ObjectID::ObjectID(const ObjectID& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:plasmaRPC.ObjectID)
}

void ObjectID::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ObjectID::~ObjectID() {
  // @@protoc_insertion_point(destructor:plasmaRPC.ObjectID)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ObjectID::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ObjectID::ArenaDtor(void* object) {
  ObjectID* _this = reinterpret_cast< ObjectID* >(object);
  (void)_this;
}
void ObjectID::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ObjectID::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ObjectID::Clear() {
// @@protoc_insertion_point(message_clear_start:plasmaRPC.ObjectID)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ObjectID::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "plasmaRPC.ObjectID.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ObjectID::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:plasmaRPC.ObjectID)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "plasmaRPC.ObjectID.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:plasmaRPC.ObjectID)
  return target;
}

size_t ObjectID::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:plasmaRPC.ObjectID)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ObjectID::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:plasmaRPC.ObjectID)
  GOOGLE_DCHECK_NE(&from, this);
  const ObjectID* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ObjectID>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:plasmaRPC.ObjectID)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:plasmaRPC.ObjectID)
    MergeFrom(*source);
  }
}

void ObjectID::MergeFrom(const ObjectID& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:plasmaRPC.ObjectID)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
}

void ObjectID::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:plasmaRPC.ObjectID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectID::CopyFrom(const ObjectID& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:plasmaRPC.ObjectID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectID::IsInitialized() const {
  return true;
}

void ObjectID::InternalSwap(ObjectID* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ObjectID::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PlasmaObject::_Internal {
 public:
};

PlasmaObject::PlasmaObject(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:plasmaRPC.PlasmaObject)
}
PlasmaObject::PlasmaObject(const PlasmaObject& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&data_offset_, &from.data_offset_,
    static_cast<size_t>(reinterpret_cast<char*>(&device_num_) -
    reinterpret_cast<char*>(&data_offset_)) + sizeof(device_num_));
  // @@protoc_insertion_point(copy_constructor:plasmaRPC.PlasmaObject)
}

void PlasmaObject::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&data_offset_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&device_num_) -
    reinterpret_cast<char*>(&data_offset_)) + sizeof(device_num_));
}

PlasmaObject::~PlasmaObject() {
  // @@protoc_insertion_point(destructor:plasmaRPC.PlasmaObject)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PlasmaObject::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PlasmaObject::ArenaDtor(void* object) {
  PlasmaObject* _this = reinterpret_cast< PlasmaObject* >(object);
  (void)_this;
}
void PlasmaObject::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PlasmaObject::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PlasmaObject::Clear() {
// @@protoc_insertion_point(message_clear_start:plasmaRPC.PlasmaObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&data_offset_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&device_num_) -
      reinterpret_cast<char*>(&data_offset_)) + sizeof(device_num_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlasmaObject::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 data_offset = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          data_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 metadata_offset = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          metadata_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 data_size = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          data_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 metadata_size = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          metadata_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 device_num = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          device_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PlasmaObject::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:plasmaRPC.PlasmaObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 data_offset = 2;
  if (this->data_offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_data_offset(), target);
  }

  // uint64 metadata_offset = 3;
  if (this->metadata_offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_metadata_offset(), target);
  }

  // uint64 data_size = 4;
  if (this->data_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_data_size(), target);
  }

  // uint64 metadata_size = 5;
  if (this->metadata_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_metadata_size(), target);
  }

  // uint32 device_num = 6;
  if (this->device_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_device_num(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:plasmaRPC.PlasmaObject)
  return target;
}

size_t PlasmaObject::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:plasmaRPC.PlasmaObject)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 data_offset = 2;
  if (this->data_offset() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_data_offset());
  }

  // uint64 metadata_offset = 3;
  if (this->metadata_offset() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_metadata_offset());
  }

  // uint64 data_size = 4;
  if (this->data_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_data_size());
  }

  // uint64 metadata_size = 5;
  if (this->metadata_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_metadata_size());
  }

  // uint32 device_num = 6;
  if (this->device_num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_device_num());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlasmaObject::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:plasmaRPC.PlasmaObject)
  GOOGLE_DCHECK_NE(&from, this);
  const PlasmaObject* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PlasmaObject>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:plasmaRPC.PlasmaObject)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:plasmaRPC.PlasmaObject)
    MergeFrom(*source);
  }
}

void PlasmaObject::MergeFrom(const PlasmaObject& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:plasmaRPC.PlasmaObject)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.data_offset() != 0) {
    _internal_set_data_offset(from._internal_data_offset());
  }
  if (from.metadata_offset() != 0) {
    _internal_set_metadata_offset(from._internal_metadata_offset());
  }
  if (from.data_size() != 0) {
    _internal_set_data_size(from._internal_data_size());
  }
  if (from.metadata_size() != 0) {
    _internal_set_metadata_size(from._internal_metadata_size());
  }
  if (from.device_num() != 0) {
    _internal_set_device_num(from._internal_device_num());
  }
}

void PlasmaObject::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:plasmaRPC.PlasmaObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlasmaObject::CopyFrom(const PlasmaObject& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:plasmaRPC.PlasmaObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlasmaObject::IsInitialized() const {
  return true;
}

void PlasmaObject::InternalSwap(PlasmaObject* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PlasmaObject, device_num_)
      + sizeof(PlasmaObject::device_num_)
      - PROTOBUF_FIELD_OFFSET(PlasmaObject, data_offset_)>(
          reinterpret_cast<char*>(&data_offset_),
          reinterpret_cast<char*>(&other->data_offset_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PlasmaObject::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ObjectDetails::_Internal {
 public:
  using HasBits = decltype(std::declval<ObjectDetails>()._has_bits_);
  static const ::plasmaRPC::PlasmaObject& object(const ObjectDetails* msg);
  static void set_has_object(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::plasmaRPC::PlasmaObject&
ObjectDetails::_Internal::object(const ObjectDetails* msg) {
  return *msg->object_;
}
ObjectDetails::ObjectDetails(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:plasmaRPC.ObjectDetails)
}
ObjectDetails::ObjectDetails(const ObjectDetails& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_object()) {
    object_ = new ::plasmaRPC::PlasmaObject(*from.object_);
  } else {
    object_ = nullptr;
  }
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:plasmaRPC.ObjectDetails)
}

void ObjectDetails::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&object_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&object_)) + sizeof(status_));
}

ObjectDetails::~ObjectDetails() {
  // @@protoc_insertion_point(destructor:plasmaRPC.ObjectDetails)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ObjectDetails::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete object_;
}

void ObjectDetails::ArenaDtor(void* object) {
  ObjectDetails* _this = reinterpret_cast< ObjectDetails* >(object);
  (void)_this;
}
void ObjectDetails::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ObjectDetails::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ObjectDetails::Clear() {
// @@protoc_insertion_point(message_clear_start:plasmaRPC.ObjectDetails)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    if (GetArena() == nullptr && object_ != nullptr) {
      delete object_;
    }
    object_ = nullptr;
  }
  status_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ObjectDetails::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .plasmaRPC.ObjectDetails.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::plasmaRPC::ObjectDetails_Status>(val));
        } else goto handle_unusual;
        continue;
      // .plasmaRPC.PlasmaObject object = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_object(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ObjectDetails::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:plasmaRPC.ObjectDetails)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .plasmaRPC.ObjectDetails.Status status = 1;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_status(), target);
  }

  // .plasmaRPC.PlasmaObject object = 2;
  if (_internal_has_object()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::object(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:plasmaRPC.ObjectDetails)
  return target;
}

size_t ObjectDetails::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:plasmaRPC.ObjectDetails)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .plasmaRPC.PlasmaObject object = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *object_);
  }

  // .plasmaRPC.ObjectDetails.Status status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ObjectDetails::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:plasmaRPC.ObjectDetails)
  GOOGLE_DCHECK_NE(&from, this);
  const ObjectDetails* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ObjectDetails>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:plasmaRPC.ObjectDetails)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:plasmaRPC.ObjectDetails)
    MergeFrom(*source);
  }
}

void ObjectDetails::MergeFrom(const ObjectDetails& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:plasmaRPC.ObjectDetails)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_object()) {
    _internal_mutable_object()->::plasmaRPC::PlasmaObject::MergeFrom(from._internal_object());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
}

void ObjectDetails::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:plasmaRPC.ObjectDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectDetails::CopyFrom(const ObjectDetails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:plasmaRPC.ObjectDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectDetails::IsInitialized() const {
  return true;
}

void ObjectDetails::InternalSwap(ObjectDetails* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ObjectDetails, status_)
      + sizeof(ObjectDetails::status_)
      - PROTOBUF_FIELD_OFFSET(ObjectDetails, object_)>(
          reinterpret_cast<char*>(&object_),
          reinterpret_cast<char*>(&other->object_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ObjectDetails::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace plasmaRPC
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::plasmaRPC::ObjectID* Arena::CreateMaybeMessage< ::plasmaRPC::ObjectID >(Arena* arena) {
  return Arena::CreateMessageInternal< ::plasmaRPC::ObjectID >(arena);
}
template<> PROTOBUF_NOINLINE ::plasmaRPC::PlasmaObject* Arena::CreateMaybeMessage< ::plasmaRPC::PlasmaObject >(Arena* arena) {
  return Arena::CreateMessageInternal< ::plasmaRPC::PlasmaObject >(arena);
}
template<> PROTOBUF_NOINLINE ::plasmaRPC::ObjectDetails* Arena::CreateMaybeMessage< ::plasmaRPC::ObjectDetails >(Arena* arena) {
  return Arena::CreateMessageInternal< ::plasmaRPC::ObjectDetails >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
